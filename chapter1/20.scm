; Exercise 1.20: 
; The process that a procedure generates is of course
; dependent on the rules used by the interpreter. As an example,
; consider the iterative gcd procedure given above. Suppose we
; were to interpret this procedure using normal-order evaluation,
; as discussed in Section 1.1.5. (The normal-order-evaluation rule
; for if is described in Exercise 1.5.) Using the substitution method
; (for normal order), illustrate the process generated in evaluating
; (gcd 206 40) and indicate the remainder operations that are
; actually performed. How many remainder operations are actually
; performed in the normal-order evaluation of (gcd 206 40)? In
; the applicative-order evaluation?

; Applicative-order evaluation will yield:
; (gcd 206 40)
; (gcd 40 6)
; (gcd 6 4)
; (gcd 4 2)
; (gcd 2 0)
; 2
;
; Let % be remainder. Normal-order evaluation will yield:
; (gcd 206 40)
; (if (= 40 0) 206 (gcd 40 (% 206 40)))
; (gcd 40 (% 206 40))
; (if (= (% 206 40) 0) 40 (gcd (% 206 40) (% 40 (% 206 40))))
; \ 1 % operation
; (if (= 6 0) 40 (gcd (% 206 40) (% 40 (% 206 40))))
; (gcd (% 206 40) (% (% 206 40) 40))
; (if (= (% 40 (% 206 40)) 0) (% 206 40) (gcd (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))
; \ 2 % operations
; (if (= (% 40 6) 0) (% 206 40) (gcd (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))
; \ 3 % operations
; (if (= 4 0) (% 206 40) (gcd (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))
; (gcd (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40))))
; (if (= (% (% 206 40) (% 40 (% 206 40))) 0) (% 40 (% 206 40)) (gcd (% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40))))))
; \ 4 % operations
; (if (= (% 6 (% 40 (% 206 40))) 0) (% 40 (% 206 40)) (gcd (% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40))))))
; \ 5 % operations
; (if (= (% 6 (% 40 6)) 0) (% 40 (% 206 40)) (gcd (% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40))))))
; \ 6 % operations
; (if (= (% 6 4) 0) (% 40 (% 206 40)) (gcd (% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40))))))
; \ 7 % operations
; (if (= 2 0) (% 40 (% 206 40)) (gcd (% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40))))))
; (gcd (% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))
; (if (= (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 8 % operations
; (if (= (% (% 40 6) (% (% 206 40) (% 40 (% 206 40)))) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 9 % operations
; (if (= (% 4 (% (% 206 40) (% 40 (% 206 40)))) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 10 % operations
; (if (= (% 4 (% 6 (% 40 (% 206 40)))) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 11 % operations
; (if (= (% 4 (% 6 (% 40 6))) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 12 % operations
; (if (= (% 4 (% 6 4)) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 13 % operations
; (if (= (% 4 2) 0) (% (% 206 40) (% 40 (% 206 40)) (gcd (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))) ((% (% 206 40) (% 40 (% 206 40))) (% (% 40 (% 206 40)) (% (% 206 40) (% 40 (% 206 40)))))))
; \ 14 % operations
; (% (% 206 40) (% 40 (% 206 40)))
; \ 15 % operations
; (% 6 (% 40 (% 206 40)))
; \ 16 % operations
; (% 6 (% 40 6))
; \ 17 % operations
; (% 6 4)
; \ 18 % operations
; 2
;
; Total of 18 remainder operations.
